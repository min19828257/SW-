import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from matplotlib import pyplot as plt
from torchvision import transforms
import torchvision.datasets as dsets

mnist_train = dsets.MNIST(root="MNIST_data/", train=True, transform=transforms.ToTensor(),download=True)
mnist_test = dsets.MNIST(root="MNIST_data/", train=False, transform=transforms.ToTensor(),download=True)
training_epochs = 15
batch_size = 100
data_loader = torch.utils.data.DataLoader(dataset=mnist_train, batch_size=batch_size, shuffle=True, drop_last=True)

device = 'cuda' if torch.cuda.is_available() else 'cpu'

if device=='cpu':


    linear = torch.nn.Linear(784, 10, bias=True).to(device)

    torch.nn.init.normal_(linear.weight)

    sigmoid = torch.nn.Sigmoid()
    #model=torch.nn.Sequential(linear,sigmoid)
    criterion = torch.nn.CrossEntropyLoss().to(device)
    optimizer=torch.optim.SGD(linear.parameters(),lr=0.1)

    for epoch in range(training_epochs):
        avg_cost=0
        total_batch=len(data_loader)

        for X, Y in data_loader:

            X=X.view(-1,28,28).to(device)
            optimizer.zero_grad()
            hypothesis=linear(X)
            cost=criterion(hypothesis,Y)
            cost.backward()
            avg_cost+=cost/total_batch

        print(avg_cost)


